{"version":3,"sources":["three/glsl/noise.ts","three/glsl/shader.ts","three/glsl/quaternion.ts","modules/utils.ts","three/simulator.ts","three/store/state.ts","three/store/gui.ts","three/InstancedBox.tsx","three/postprocessing/Effects.tsx","three/postprocessing/VolumetricLightPass.tsx","three/TCanvas.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["snoise31","snoise33","curlNoise33","vertexShader","positionFragmentShader","clampedRandom","min","max","Math","random","Simulator","gl","_width","_height","_gpuCompute","_variables","_positionMaterial","THREE","_setTexturePosition","texture","createTexture","theArray","image","data","i","length","x","y","z","w","variable","addVariable","wrapS","wrapT","material","uniforms","value","clone","push","_setVariableDependencies","forEach","setVariableDependencies","compute","u_time","this","GPUComputationRenderer","init","find","v","name","getCurrentRenderTarget","getAlternateRenderTarget","VolumetricLightState","enabled","exposure","decay","density","weight","samples","BoxState","LightState","color","GUIController","_gui","_folder","title","folder","folders","f","_title","addFolder","_uncontainedName","controllers","c","_name","setBox","add","param","setLight","addColor","setVolumetricLight","GUI","_instance","InstancedBox","meshRef","useRef","useThree","width","height","amount","simulator","useMemo","reference","ref","iw","ih","Float32Array","from","useEffect","matrix","setPosition","current","setMatrixAt","shader","u_light","u_lightColor","u_boxScale","u_texturePosition","u_texturePrevPosition","fragmentShader","instance","useFrame","texturePosition","texturePrevPosition","args","undefined","castShadow","receiveShadow","attachObject","extend","EffectComposer","RenderPass","ShaderPass","Effects","props","children","sRGBCorrection","composerRef","scene","camera","size","setSize","render","attachArray","GammaCorrectionShader","VolumetricLightPass","passRef","tDiffuse","u_lightPosition","u_exposure","u_decay","u_density","u_weight","u_samples","TCanvas","position","fov","aspect","window","innerWidth","innerHeight","near","far","dpr","devicePixelRatio","shadows","attach","OrbitControls","Stats","LightMesh","App","style","overflow","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbf7ebb4.chunk.js","sourcesContent":["export const random33 = `\r\nvec3 random33(vec3 c) {\r\n  float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\r\n  vec3 r;\r\n  r.z = fract(512.0*j);\r\n  j *= .125;\r\n  r.x = fract(512.0*j);\r\n  j *= .125;\r\n  r.y = fract(512.0*j);\r\n  return r-0.5;\r\n}\r\n`\r\n\r\nexport const snoise31 = `\r\n${random33}\r\n\r\nconst float F3 =  0.3333333;\r\nconst float G3 =  0.1666667;\r\n\r\nfloat snoise31(vec3 p) {\r\n  vec3 s = floor(p + dot(p, vec3(F3)));\r\n  vec3 x = p - s + dot(s, vec3(G3));\r\n    \r\n  vec3 e = step(vec3(0.0), x - x.yzx);\r\n  vec3 i1 = e*(1.0 - e.zxy);\r\n  vec3 i2 = 1.0 - e.zxy*(1.0 - e);\r\n    \r\n  vec3 x1 = x - i1 + G3;\r\n  vec3 x2 = x - i2 + 2.0*G3;\r\n  vec3 x3 = x - 1.0 + 3.0*G3;\r\n    \r\n  vec4 w, d;\r\n    \r\n  w.x = dot(x, x);\r\n  w.y = dot(x1, x1);\r\n  w.z = dot(x2, x2);\r\n  w.w = dot(x3, x3);\r\n    \r\n  w = max(0.6 - w, 0.0);\r\n    \r\n  d.x = dot(random33(s), x);\r\n  d.y = dot(random33(s + i1), x1);\r\n  d.z = dot(random33(s + i2), x2);\r\n  d.w = dot(random33(s + 1.0), x3);\r\n    \r\n  w *= w;\r\n  w *= w;\r\n  d *= w;\r\n    \r\n  return dot(d, vec4(52.0));\r\n}\r\n`\r\n\r\nexport const snoise33 = `\r\n${snoise31}\r\n\r\nvec3 snoise33(vec3 x) {\r\n  float s  = snoise31(vec3( x ));\r\n  float s1 = snoise31(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));\r\n  float s2 = snoise31(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));\r\n  vec3 c = vec3( s , s1 , s2 );\r\n  return c;\r\n}\r\n`\r\n\r\nexport const curlNoise33 = `\r\n${snoise33}\r\n\r\nvec3 curlNoise33(vec3 p) {\r\n  const float e = .1;\r\n  vec3 dx = vec3( e   , 0.0 , 0.0 );\r\n  vec3 dy = vec3( 0.0 , e   , 0.0 );\r\n  vec3 dz = vec3( 0.0 , 0.0 , e   );\r\n\r\n  vec3 p_x0 = snoise33( p - dx );\r\n  vec3 p_x1 = snoise33( p + dx );\r\n  vec3 p_y0 = snoise33( p - dy );\r\n  vec3 p_y1 = snoise33( p + dy );\r\n  vec3 p_z0 = snoise33( p - dz );\r\n  vec3 p_z1 = snoise33( p + dz );\r\n\r\n  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;\r\n  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;\r\n  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;\r\n\r\n  const float divisor = 1.0 / ( 2.0 * e );\r\n  return normalize( vec3( x , y , z ) * divisor );\r\n}\r\n`\r\n","import { curlNoise33 } from './noise';\r\nimport { quaternion } from './quaternion';\r\n\r\nexport const vertexShader = `\r\nattribute vec2 a_ref;\r\nuniform vec3 u_boxScale;\r\nuniform sampler2D u_texturePosition;\r\nuniform sampler2D u_texturePrevPosition;\r\nvarying vec3 v_pos;\r\nvarying vec3 v_normal;\r\n\r\nconst vec3 BASIC_VECTOR = normalize(vec3(0.0, 0.0, 1.0));\r\n\r\n${quaternion}\r\n\r\nvoid main() {\r\n\tvec4 positionInfo = texture2D(u_texturePosition, a_ref);\r\n\tvec4 prevPositionInfo = texture2D(u_texturePrevPosition, a_ref);\r\n\tvec3 pos = position;\r\n\t\r\n\tv_normal = normalize(normal);\r\n\r\n\t// ----------------------------------------------\r\n\t// 1. generate plane from 0 scale\r\n\r\n  pos *= u_boxScale;\r\n\tpos *= clamp(1.0 - positionInfo.w, 0.0, 1.0);\r\n\r\n  // ----------------------------------------------\r\n\t// 2. rotate using quaternion\r\n\r\n\t// calc rotate axis\r\n\tvec3 dir = normalize(positionInfo.xyz - prevPositionInfo.xyz);\r\n\tvec3 rotateAxis = normalize(cross(BASIC_VECTOR, dir));\r\n\t\r\n\tif (0.0 < length(rotateAxis)) {\r\n\t\t// calc angle\r\n\t\tfloat c = dot(BASIC_VECTOR, dir);\r\n\t\tfloat angle = acos(c);\r\n\t\r\n\t\t// rotate using Quaternion\r\n\t\tQuaternion q = axisAngle(rotateAxis, angle);\r\n\t\tpos = rotate(pos, q);\r\n\t\tv_normal = normalize(rotate(normal, q));\r\n\t}\r\n\r\n  // ----------------------------------------------\r\n\t// 3. convert position to grobal from local\r\n\r\n\tvec4 globalPosition = instanceMatrix * vec4(pos, 1.0);\r\n\tvec3 gPos = positionInfo.xyz + globalPosition.xyz;\r\n\t\r\n\tvec4 mPos = modelMatrix * vec4(gPos, 1.0);\r\n\tv_pos = mPos.xyz;\r\n\r\n\tgl_Position = projectionMatrix * viewMatrix * mPos;\r\n}\r\n`\r\n\r\nexport const fragmentShader = `\r\nuniform vec3 u_light;\r\nuniform vec3 u_lightColor;\r\nvarying vec3 v_pos;\r\nvarying vec3 v_normal;\r\n\r\nvoid main() {\r\n  vec3 color = u_lightColor * 0.8;\r\n\r\n\tvec3 fromLight = v_pos - u_light;\r\n\tfloat d = 1.0 - (dot(v_normal, normalize(fromLight)) + 1.0) * 0.5; // 0 ~ 1\r\n\tcolor *= smoothstep(0.5, 0.8, d);\r\n\r\n\tfloat decay = 1.0 - smoothstep(5.0, 10.0, length(fromLight));\r\n\tcolor *= decay;\r\n\r\n\tgl_FragColor = vec4(color, 1.0);\r\n}\r\n`\r\n\r\nexport const positionFragmentShader = `\r\nuniform float u_time;\r\nuniform sampler2D u_defaultTexture;\r\n\r\nconst float divergence = 0.03;\r\nconst float dieSpeed = 0.99;\r\n\r\n${curlNoise33}\r\n\r\nvoid main()\t{\r\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\r\n\tvec4 tmpPos = texture2D(texturePosition, uv);\r\n\tvec3 pos = tmpPos.xyz;\r\n  float life = tmpPos.w;\r\n\r\n  if (life < 0.01) {\r\n\t\tvec4 defPos = texture2D(u_defaultTexture, uv);\r\n\t\tpos = defPos.xyz;\r\n\t\tlife = defPos.w + 1.0;\r\n\t}\r\n\r\n\tvec3 seed = sin(pos * 0.1 + u_time * 0.01) + u_time * 0.01;\r\n  pos += curlNoise33(seed) * divergence;\r\n\t\r\n\tgl_FragColor = vec4(pos, life * dieSpeed);\r\n}\r\n`\r\n","/**\r\n * クォータニオン\r\n * @link https://qiita.com/aa_debdeb/items/c34a3088b2d8d3731813\r\n */\r\nexport const quaternion = `\r\nstruct Quaternion {\r\n  float x;\r\n  float y;\r\n  float z;\r\n  float w;\r\n};\r\n\r\nQuaternion identity() {\r\n  return Quaternion(0.0, 0.0, 0.0, 1.0);\r\n}\r\n\r\nQuaternion axisAngle(vec3 axis, float radian) {\r\n  vec3 naxis = normalize(axis);\r\n  float h = 0.5 * radian;\r\n  float s = sin(h);\r\n  \r\n  return Quaternion(naxis.x * s, naxis.y * s, naxis.z * s, cos(h));\r\n}\r\n\r\nQuaternion conjugate(Quaternion q) {\r\n  return Quaternion(-q.x, -q.y, -q.z, q.w);\r\n}\r\n\r\nQuaternion add(Quaternion q1, Quaternion q2) {\r\n  return Quaternion(\r\n    q1.x + q2.x,\r\n    q1.y + q2.y,\r\n    q1.z + q2.z,\r\n    q1.w + q2.w\r\n  );\r\n}\r\n\r\nQuaternion sub(Quaternion q1, Quaternion q2) {\r\n  return Quaternion(\r\n    q1.x - q2.x,\r\n    q1.y - q2.y,\r\n    q1.z - q2.z,\r\n    q1.w - q2.w\r\n  );\r\n}\r\n\r\nQuaternion mul(Quaternion q, float f) {\r\n  return Quaternion(f * q.x, f * q.y, f * q.z, f * q.w);\r\n}\r\n\r\nQuaternion mul(Quaternion q1, Quaternion q2) {\r\n  return Quaternion(\r\n    q2.w * q1.x - q2.z * q1.y + q2.y * q1.z + q2.x * q1.w,\r\n    q2.z * q1.x + q2.w * q1.y - q2.x * q1.z + q2.y * q1.w,\r\n    -q2.y * q1.x + q2.x * q1.y + q2.w * q1.z + q2.z * q1.w,\r\n    -q2.x * q1.x - q2.y * q1.y - q2.z * q1.z + q2.w * q1.w\r\n  );\r\n}\r\n\r\nfloat qdot(Quaternion q1, Quaternion q2) {\r\n  return q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;\r\n}\r\n\r\nfloat squareNorm(Quaternion q) {\r\n  return q.x * q.x + q.y * q.y + q.z * q.z + q.w + q.w;\r\n}\r\n\r\nfloat norm(Quaternion q) {\r\n  return sqrt(squareNorm(q));\r\n}\r\n\r\nQuaternion qinverse(Quaternion q) {\r\n  Quaternion c = conjugate(q);\r\n  float s = norm(q);\r\n\r\n  return mul(c, 1.0 / s);\r\n}\r\n\r\nvec3 rotate(vec3 v, Quaternion q) {\r\n  // norm of q must be 1.\r\n  Quaternion vq = Quaternion(v.x, v.y, v.z, 0.0);\r\n  Quaternion cq = conjugate(q);\r\n  Quaternion mq = mul(mul(cq, vq), q);\r\n\r\n  return vec3(mq.x, mq.y, mq.z);\r\n}\r\n \r\nQuaternion slerp(Quaternion q1, Quaternion q2, float t) {\r\n  float cosine = qdot(q1, q2);\r\n  if (cosine < 0.0) {\r\n    cosine = qdot(q1, mul(q2, -1.0));\r\n  }\r\n  float r = acos(qdot(q1, q2));\r\n  float is = 1.0 / sin(r);\r\n\r\n  return add(\r\n    mul(q1, sin((1.0 - t) * r) * is),\r\n    mul(q2, sin(t * r) * is)\r\n  );\r\n}\r\n`\r\n","/**\r\n * 指定範囲のランダム値を取得する\r\n * @param min 最小値\r\n * @param max 最大値\r\n * @returns クランプされた値\r\n */\r\nexport const clampedRandom = (min: number, max: number) => {\r\n\treturn Math.random() * (max - min) + min\r\n}\r\n","import * as THREE from 'three';\r\nimport { GPUComputationRenderer, Variable } from 'three/examples/jsm/misc/GPUComputationRenderer';\r\nimport { clampedRandom } from '../modules/utils';\r\nimport { positionFragmentShader } from './glsl/shader';\r\n\r\nexport class Simulator {\r\n\tprivate _gpuCompute\r\n\tprivate _variables: Variable[] = []\r\n\tprivate _positionMaterial = new THREE.ShaderMaterial()\r\n\r\n\tconstructor(gl: THREE.WebGLRenderer, private _width: number, private _height: number) {\r\n\t\tthis._gpuCompute = new GPUComputationRenderer(this._width, this._height, gl)\r\n\t\tthis._setTexturePosition()\r\n\t\tthis._setVariableDependencies()\r\n\t\tthis._gpuCompute.init()\r\n\t}\r\n\r\n\tprivate _setTexturePosition = () => {\r\n\t\t// set the default position to texture\r\n\t\tconst texture = this._gpuCompute.createTexture()\r\n\t\tconst theArray = texture.image.data\r\n\r\n\t\tfor (let i = 0; i < theArray.length; i += 4) {\r\n\t\t\tconst x = clampedRandom(-3, 3)\r\n\t\t\tconst y = clampedRandom(-3, 3)\r\n\t\t\tconst z = clampedRandom(-3, 3)\r\n\t\t\tconst w = clampedRandom(0.3, 1)\r\n\r\n\t\t\ttheArray[i + 0] = x\r\n\t\t\ttheArray[i + 1] = y\r\n\t\t\ttheArray[i + 2] = z\r\n\t\t\ttheArray[i + 3] = w\r\n\t\t}\r\n\r\n\t\t// set fragment shader\r\n\t\tconst variable = this._gpuCompute.addVariable('texturePosition', positionFragmentShader, texture)\r\n\t\tvariable.wrapS = THREE.RepeatWrapping\r\n\t\tvariable.wrapT = THREE.RepeatWrapping\r\n\r\n\t\t// set uniforms\r\n\t\tthis._positionMaterial = variable.material\r\n\t\tthis._positionMaterial.uniforms['u_defaultTexture'] = { value: texture.clone() }\r\n\t\tthis._positionMaterial.uniforms['u_time'] = { value: 0 }\r\n\r\n\t\t// add variable\r\n\t\tthis._variables.push(variable)\r\n\t}\r\n\r\n\tprivate _setVariableDependencies = () => {\r\n\t\tthis._variables.forEach(variable => {\r\n\t\t\tthis._gpuCompute.setVariableDependencies(variable, this._variables)\r\n\t\t})\r\n\t\t// it means.\r\n\t\t// this._gpuCompute.setVariableDependencies(positionVariable, [positionVariable, velocityVariable, ...])\r\n\t\t// this._gpuCompute.setVariableDependencies(velocityVariable, [positionVariable, velocityVariable, ...])\r\n\t}\r\n\r\n\tcompute = () => {\r\n\t\tthis._gpuCompute.compute()\r\n\t\tthis._positionMaterial.uniforms.u_time.value += 0.005\r\n\t}\r\n\r\n\tget texturePosition() {\r\n\t\tconst variable = this._variables.find(v => v.name === 'texturePosition')!\r\n\t\tconst target = this._gpuCompute.getCurrentRenderTarget(variable) as THREE.WebGLRenderTarget\r\n\t\treturn target.texture\r\n\t}\r\n\r\n\tget texturePrevPosition() {\r\n\t\tconst variable = this._variables.find(v => v.name === 'texturePosition')!\r\n\t\tconst target = this._gpuCompute.getAlternateRenderTarget(variable) as THREE.WebGLRenderTarget\r\n\t\treturn target.texture\r\n\t}\r\n}\r\n","export const VolumetricLightState = {\r\n\tenabled: true,\r\n\texposure: 0.3,\r\n\tdecay: 0.95,\r\n\tdensity: 0.4,\r\n\tweight: 0.2,\r\n\tsamples: 100\r\n}\r\n\r\nexport const BoxState = {\r\n\tx: 0.3,\r\n\ty: 0.05,\r\n\tz: 1.0\r\n}\r\n\r\nexport const LightState = {\r\n\tcolor: '#fff'\r\n}\r\n","import GUI from 'lil-gui';\r\nimport { BoxState, LightState, VolumetricLightState } from './state';\r\n\r\nexport class GUIController {\r\n\tprivate static _instance: GUIController | null\r\n\tprivate _gui\r\n\r\n\tprivate constructor() {\r\n\t\tthis._gui = new GUI()\r\n\t}\r\n\r\n\tstatic get instance() {\r\n\t\tif (!this._instance) {\r\n\t\t\tthis._instance = new GUIController()\r\n\t\t}\r\n\t\treturn this._instance\r\n\t}\r\n\r\n\tprivate _folder = (title: string) => {\r\n\t\tlet folder = this._gui.folders.find(f => f._title === title)\r\n\t\tif (!folder) folder = this._gui.addFolder(title)\r\n\t\treturn folder\r\n\t}\r\n\r\n\tprivate _uncontainedName = (folder: GUI, name: string) => {\r\n\t\treturn !folder.controllers.find(c => c._name === name)\r\n\t}\r\n\r\n\tsetBox = () => {\r\n\t\tconst folder = this._folder('Instanced Box')\r\n\r\n\t\tconst add = (name: string, param: [number, number, number]) => {\r\n\t\t\tthis._uncontainedName(folder, name) && folder.add(BoxState, name, ...param)\r\n\t\t}\r\n\r\n\t\tadd('x', [0.05, 1, 0.01])\r\n\t\tadd('y', [0.05, 1, 0.01])\r\n\t\tadd('z', [0.05, 1, 0.01])\r\n\t}\r\n\r\n\tsetLight = () => {\r\n\t\tconst folder = this._folder('Light')\r\n\r\n\t\tthis._uncontainedName(folder, 'color') && folder.addColor(LightState, 'color')\r\n\t}\r\n\r\n\tsetVolumetricLight = () => {\r\n\t\tconst folder = this._folder('Post-processing')\r\n\r\n\t\tconst add = (name: string, param?: [number, number, number]) => {\r\n\t\t\tif (param) {\r\n\t\t\t\tthis._uncontainedName(folder, name) && folder.add(VolumetricLightState, name, ...param)\r\n\t\t\t} else {\r\n\t\t\t\tthis._uncontainedName(folder, name) && folder.add(VolumetricLightState, name)\r\n\t\t\t}\r\n\t\t}\r\n\r\n\t\tadd('enabled')\r\n\t\tadd('exposure', [0, 1, 0.01])\r\n\t\tadd('decay', [0, 3, 0.01])\r\n\t\tadd('density', [0, 1, 0.01])\r\n\t\tadd('weight', [0, 1, 0.01])\r\n\t\tadd('samples', [10, 100, 10])\r\n\t}\r\n}\r\n","import React, { useEffect, useMemo, useRef, VFC } from 'react';\r\nimport * as THREE from 'three';\r\nimport { useFrame, useThree } from '@react-three/fiber';\r\nimport { fragmentShader, vertexShader } from './glsl/shader';\r\nimport { Simulator } from './simulator';\r\nimport { GUIController } from './store/gui';\r\nimport { BoxState, LightState } from './store/state';\r\n\r\nexport const InstancedBox: VFC = () => {\r\n\tconst meshRef = useRef<THREE.InstancedMesh>(null)\r\n\tconst { gl } = useThree()\r\n\r\n\t// plane amount\r\n\tconst [width, height] = [128, 128]\r\n\tconst amount = width * height\r\n\r\n\t// gpgpu simulator\r\n\tconst simulator = useMemo(() => new Simulator(gl, width, height), [gl, height, width])\r\n\r\n\t// uv to access simulator texture\r\n\tconst reference = useMemo(() => {\r\n\t\tconst ref = []\r\n\t\tfor (let iw = 0; iw < width; iw++) {\r\n\t\t\tfor (let ih = 0; ih < height; ih++) {\r\n\t\t\t\tref.push(iw / width, ih / height)\r\n\t\t\t}\r\n\t\t}\r\n\t\treturn Float32Array.from(ref)\r\n\t}, [height, width])\r\n\r\n\t// default position (dummy)\r\n\tuseEffect(() => {\r\n\t\tconst matrix = new THREE.Matrix4()\r\n\r\n\t\tfor (let i = 0; i < amount; i++) {\r\n\t\t\tmatrix.setPosition(0, 0, 0)\r\n\t\t\tmeshRef.current!.setMatrixAt(i, matrix)\r\n\t\t}\r\n\t}, [amount])\r\n\r\n\t// shader\r\n\tconst shader: THREE.Shader = {\r\n\t\tuniforms: {\r\n\t\t\tu_light: { value: [0, 0, 0] },\r\n\t\t\tu_lightColor: { value: new THREE.Color(LightState.color) },\r\n\t\t\tu_boxScale: { value: [BoxState.x, BoxState.y, BoxState.z] },\r\n\t\t\tu_texturePosition: { value: null },\r\n\t\t\tu_texturePrevPosition: { value: null }\r\n\t\t},\r\n\t\tvertexShader: vertexShader,\r\n\t\tfragmentShader: fragmentShader\r\n\t}\r\n\r\n\t// set controller\r\n\tGUIController.instance.setBox()\r\n\r\n\tuseFrame(() => {\r\n\t\tsimulator.compute()\r\n\t\tshader.uniforms.u_texturePosition.value = simulator.texturePosition\r\n\t\tshader.uniforms.u_texturePrevPosition.value = simulator.texturePrevPosition\r\n\t\tshader.uniforms.u_boxScale.value = [BoxState.x, BoxState.y, BoxState.z]\r\n\t\tshader.uniforms.u_lightColor.value = new THREE.Color(LightState.color)\r\n\t})\r\n\r\n\treturn (\r\n\t\t<instancedMesh ref={meshRef} args={[undefined, undefined, amount]} castShadow receiveShadow>\r\n\t\t\t<boxGeometry args={[1, 1, 1]}>\r\n\t\t\t\t<instancedBufferAttribute attachObject={['attributes', 'a_ref']} args={[reference, 2]} />\r\n\t\t\t</boxGeometry>\r\n\t\t\t<shaderMaterial args={[shader]} />\r\n\t\t</instancedMesh>\r\n\t)\r\n}\r\n","import { useEffect, useRef, VFC } from 'react';\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer';\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass';\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\r\nimport { GammaCorrectionShader } from 'three/examples/jsm/shaders/GammaCorrectionShader';\r\nimport { extend, useFrame, useThree } from '@react-three/fiber';\r\n\r\nextend({ EffectComposer, RenderPass, ShaderPass })\r\n\r\ntype EffectsProps = {\r\n\tchildren: React.ReactNode\r\n\tsRGBCorrection?: boolean\r\n}\r\n\r\nexport const Effects: VFC<EffectsProps> = props => {\r\n\tconst { children, sRGBCorrection } = props\r\n\r\n\tconst composerRef = useRef<EffectComposer>(null)\r\n\tconst { gl, scene, camera, size } = useThree()\r\n\r\n\tuseEffect(() => {\r\n\t\tcomposerRef.current!.setSize(size.width, size.height)\r\n\t}, [size])\r\n\r\n\tuseFrame(() => {\r\n\t\tcomposerRef.current!.render()\r\n\t}, 1)\r\n\r\n\treturn (\r\n\t\t<effectComposer ref={composerRef} args={[gl]}>\r\n\t\t\t<renderPass attachArray=\"passes\" args={[scene, camera]} />\r\n\t\t\t{children}\r\n\t\t\t{sRGBCorrection && <shaderPass attachArray=\"passes\" args={[GammaCorrectionShader]} />}\r\n\t\t</effectComposer>\r\n\t)\r\n}\r\n","// --------------------------------------------------------\r\n// Reference\r\n// https://codesandbox.io/s/volumetric-light-w633u\r\n// --------------------------------------------------------\r\n\r\nimport { useMemo, useRef, VFC } from 'react';\r\nimport * as THREE from 'three';\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass';\r\nimport { extend, useFrame } from '@react-three/fiber';\r\nimport { GUIController } from '../store/gui';\r\nimport { VolumetricLightState } from '../store/state';\r\n\r\nextend({ ShaderPass })\r\n\r\nexport const VolumetricLightPass: VFC = () => {\r\n\t// set controller\r\n\tGUIController.instance.setVolumetricLight()\r\n\r\n\tconst passRef = useRef<ShaderPass>(null)\r\n\r\n\tconst shader: THREE.Shader = useMemo(() => {\r\n\t\treturn {\r\n\t\t\tuniforms: {\r\n\t\t\t\ttDiffuse: { value: null },\r\n\t\t\t\tu_lightPosition: { value: [0.5, 0.5] },\r\n\t\t\t\tu_exposure: { value: VolumetricLightState.exposure },\r\n\t\t\t\tu_decay: { value: VolumetricLightState.decay },\r\n\t\t\t\tu_density: { value: VolumetricLightState.density },\r\n\t\t\t\tu_weight: { value: VolumetricLightState.weight },\r\n\t\t\t\tu_samples: { value: VolumetricLightState.samples }\r\n\t\t\t},\r\n\t\t\tvertexShader: vertexShader,\r\n\t\t\tfragmentShader: fragmentShader\r\n\t\t}\r\n\t}, [])\r\n\r\n\tuseFrame(() => {\r\n\t\tpassRef.current!.enabled = VolumetricLightState.enabled\r\n\t\tpassRef.current!.uniforms.u_exposure.value = VolumetricLightState.exposure\r\n\t\tpassRef.current!.uniforms.u_decay.value = VolumetricLightState.decay\r\n\t\tpassRef.current!.uniforms.u_density.value = VolumetricLightState.density\r\n\t\tpassRef.current!.uniforms.u_weight.value = VolumetricLightState.weight\r\n\t\tpassRef.current!.uniforms.u_samples.value = VolumetricLightState.samples\r\n\t})\r\n\r\n\treturn <shaderPass ref={passRef} attachArray=\"passes\" args={[shader]} />\r\n}\r\n\r\nconst vertexShader = `\r\nvarying vec2 v_uv;\r\n\r\nvoid main() {\r\n  v_uv = uv;\r\n\r\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\r\n}\r\n`\r\n\r\nconst fragmentShader = `\r\nuniform sampler2D tDiffuse;\r\nuniform vec2 u_lightPosition;\r\nuniform float u_exposure;\r\nuniform float u_decay;\r\nuniform float u_density;\r\nuniform float u_weight;\r\nuniform int u_samples;\r\nvarying vec2 v_uv;\r\n\r\nconst int MAX_SAMPLES = 100;\r\n\r\nvoid main() {\r\n  vec2 texCoord = v_uv;\r\n  vec2 deltaTextCoord = texCoord - u_lightPosition;\r\n  vec4 color = texture2D(tDiffuse, texCoord);\r\n  deltaTextCoord *= 1.0 / float(u_samples) * u_density;\r\n  float illuminationDecay = 1.0;\r\n\r\n  for(int i = 0; i < MAX_SAMPLES; i++) {\r\n    if(i == u_samples) break;\r\n    texCoord -= deltaTextCoord;\r\n    vec4 tex = texture2D(tDiffuse, texCoord);\r\n    tex *= illuminationDecay * u_weight;\r\n    color += tex;\r\n    illuminationDecay *= u_decay;\r\n  }\r\n\r\n  gl_FragColor = color * u_exposure;\r\n}\r\n`\r\n","import React, { useRef, VFC } from 'react';\r\nimport * as THREE from 'three';\r\nimport { Icosahedron, OrbitControls, Stats } from '@react-three/drei';\r\nimport { Canvas, useFrame } from '@react-three/fiber';\r\nimport { InstancedBox } from './InstancedBox';\r\nimport { Effects } from './postprocessing/Effects';\r\nimport { VolumetricLightPass } from './postprocessing/VolumetricLightPass';\r\nimport { GUIController } from './store/gui';\r\nimport { LightState } from './store/state';\r\n\r\nexport const TCanvas: VFC = () => {\r\n\treturn (\r\n\t\t<Canvas\r\n\t\t\tcamera={{\r\n\t\t\t\tposition: [0, 0, 15],\r\n\t\t\t\tfov: 50,\r\n\t\t\t\taspect: window.innerWidth / window.innerHeight,\r\n\t\t\t\tnear: 0.01,\r\n\t\t\t\tfar: 2000\r\n\t\t\t}}\r\n\t\t\tdpr={window.devicePixelRatio}\r\n\t\t\tshadows>\r\n\t\t\t<color attach=\"background\" args={['#000']} />\r\n\t\t\t{/* objects */}\r\n\t\t\t<LightMesh />\r\n\t\t\t<InstancedBox />\r\n\t\t\t{/* postprocessing */}\r\n\t\t\t<Effects>\r\n\t\t\t\t<VolumetricLightPass />\r\n\t\t\t</Effects>\r\n\t\t\t{/* helpers */}\r\n\t\t\t<OrbitControls />\r\n\t\t\t<Stats />\r\n\t\t</Canvas>\r\n\t)\r\n}\r\n\r\nconst LightMesh: VFC = () => {\r\n\tconst meshRef = useRef<THREE.Mesh>(null)\r\n\r\n\tGUIController.instance.setLight()\r\n\r\n\tuseFrame(() => {\r\n\t\t;(meshRef.current!.material as THREE.MeshBasicMaterial).color = new THREE.Color(LightState.color)\r\n\t})\r\n\r\n\treturn (\r\n\t\t<Icosahedron ref={meshRef} args={[2, 10]}>\r\n\t\t\t<meshBasicMaterial color={LightState.color} />\r\n\t\t</Icosahedron>\r\n\t)\r\n}\r\n","import React, { VFC } from 'react';\nimport { TCanvas } from './three/TCanvas';\n\nexport const App: VFC = () => {\n\treturn (\n\t\t<div style={{ width: '100vw', height: '100vh', overflow: 'hidden' }}>\n\t\t\t<TCanvas />\n\t\t</div>\n\t)\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}