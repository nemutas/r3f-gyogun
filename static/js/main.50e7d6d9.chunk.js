(this.webpackJsonpr3f_gyogun=this.webpackJsonpr3f_gyogun||[]).push([[0],{44:function(n,e,t){},52:function(n,e,t){"use strict";t.r(e);t(44);var o=t(8),r=t.n(o),i=t(34),a=t.n(i),s=t(10),u=t(13),c=t(11),l=function(n){var e,t=n.imagePath,r=n.linkPath,i=n.position,a=void 0===i?"bottom-right":i,s=n.size,l=void 0===s?[50,50]:s,f=Object(o.useState)(!1),x=Object(u.a)(f,2),m=x[0],p=x[1],_="/r3f-gyogun"+t;switch(a){case"top-left":e=v.topLeft;break;case"top-right":e=v.topRight;break;case"bottom-left":e=v.bottomLeft;break;default:e=v.bottomRight}return Object(c.jsx)("a",{style:e,href:r,target:"_blank",rel:"noreferrer noopener",onMouseEnter:function(){return p(!0)},onMouseLeave:function(){return p(!1)},children:Object(c.jsx)("img",{style:m?d.img:v.img,src:_,alt:"",width:l[0],height:l[1]})})},f={position:"absolute",fontSize:"0"},v={topLeft:Object(s.a)(Object(s.a)({},f),{},{top:"10px",left:"10px"}),topRight:Object(s.a)(Object(s.a)({},f),{},{top:"10px",right:"10px"}),bottomLeft:Object(s.a)(Object(s.a)({},f),{},{bottom:"10px",left:"10px"}),bottomRight:Object(s.a)(Object(s.a)({},f),{},{bottom:"10px",right:"10px"}),img:{objectFit:"cover",opacity:"0.5",transform:"rotate(0deg)",transition:"all 0.3s"}},d={img:Object(s.a)(Object(s.a)({},v.img),{},{opacity:"1",transform:"rotate(360deg)"})},x=t(4),m=t(56),p=t(57),_=t(55),g=t(12),h="\n".concat("\nvec3 random33(vec3 c) {\n  float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n  vec3 r;\n  r.z = fract(512.0*j);\n  j *= .125;\n  r.x = fract(512.0*j);\n  j *= .125;\n  r.y = fract(512.0*j);\n  return r-0.5;\n}\n","\n\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\n\nfloat snoise31(vec3 p) {\n  vec3 s = floor(p + dot(p, vec3(F3)));\n  vec3 x = p - s + dot(s, vec3(G3));\n    \n  vec3 e = step(vec3(0.0), x - x.yzx);\n  vec3 i1 = e*(1.0 - e.zxy);\n  vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n    \n  vec3 x1 = x - i1 + G3;\n  vec3 x2 = x - i2 + 2.0*G3;\n  vec3 x3 = x - 1.0 + 3.0*G3;\n    \n  vec4 w, d;\n    \n  w.x = dot(x, x);\n  w.y = dot(x1, x1);\n  w.z = dot(x2, x2);\n  w.w = dot(x3, x3);\n    \n  w = max(0.6 - w, 0.0);\n    \n  d.x = dot(random33(s), x);\n  d.y = dot(random33(s + i1), x1);\n  d.z = dot(random33(s + i2), x2);\n  d.w = dot(random33(s + 1.0), x3);\n    \n  w *= w;\n  w *= w;\n  d *= w;\n    \n  return dot(d, vec4(52.0));\n}\n"),q="\n".concat(h,"\n\nvec3 snoise33(vec3 x) {\n  float s  = snoise31(vec3( x ));\n  float s1 = snoise31(vec3( x.y - 19.1 , x.z + 33.4 , x.x + 47.2 ));\n  float s2 = snoise31(vec3( x.z + 74.2 , x.x - 124.5 , x.y + 99.4 ));\n  vec3 c = vec3( s , s1 , s2 );\n  return c;\n}\n"),b="\n".concat(q,"\n\nvec3 curlNoise33(vec3 p) {\n  const float e = .1;\n  vec3 dx = vec3( e   , 0.0 , 0.0 );\n  vec3 dy = vec3( 0.0 , e   , 0.0 );\n  vec3 dz = vec3( 0.0 , 0.0 , e   );\n\n  vec3 p_x0 = snoise33( p - dx );\n  vec3 p_x1 = snoise33( p + dx );\n  vec3 p_y0 = snoise33( p - dy );\n  vec3 p_y1 = snoise33( p + dy );\n  vec3 p_z0 = snoise33( p - dz );\n  vec3 p_z1 = snoise33( p + dz );\n\n  float x = p_y1.z - p_y0.z - p_z1.y + p_z0.y;\n  float y = p_z1.x - p_z0.x - p_x1.z + p_x0.z;\n  float z = p_x1.y - p_x0.y - p_y1.x + p_y0.x;\n\n  const float divisor = 1.0 / ( 2.0 * e );\n  return normalize( vec3( x , y , z ) * divisor );\n}\n"),y="\nattribute vec2 a_ref;\nuniform vec3 u_boxScale;\nuniform sampler2D u_texturePosition;\nuniform sampler2D u_texturePrevPosition;\nvarying vec3 v_pos;\nvarying vec3 v_normal;\n\nconst vec3 BASIC_VECTOR = normalize(vec3(0.0, 0.0, 1.0));\n\n".concat("\nstruct Quaternion {\n  float x;\n  float y;\n  float z;\n  float w;\n};\n\nQuaternion identity() {\n  return Quaternion(0.0, 0.0, 0.0, 1.0);\n}\n\nQuaternion axisAngle(vec3 axis, float radian) {\n  vec3 naxis = normalize(axis);\n  float h = 0.5 * radian;\n  float s = sin(h);\n  \n  return Quaternion(naxis.x * s, naxis.y * s, naxis.z * s, cos(h));\n}\n\nQuaternion conjugate(Quaternion q) {\n  return Quaternion(-q.x, -q.y, -q.z, q.w);\n}\n\nQuaternion add(Quaternion q1, Quaternion q2) {\n  return Quaternion(\n    q1.x + q2.x,\n    q1.y + q2.y,\n    q1.z + q2.z,\n    q1.w + q2.w\n  );\n}\n\nQuaternion sub(Quaternion q1, Quaternion q2) {\n  return Quaternion(\n    q1.x - q2.x,\n    q1.y - q2.y,\n    q1.z - q2.z,\n    q1.w - q2.w\n  );\n}\n\nQuaternion mul(Quaternion q, float f) {\n  return Quaternion(f * q.x, f * q.y, f * q.z, f * q.w);\n}\n\nQuaternion mul(Quaternion q1, Quaternion q2) {\n  return Quaternion(\n    q2.w * q1.x - q2.z * q1.y + q2.y * q1.z + q2.x * q1.w,\n    q2.z * q1.x + q2.w * q1.y - q2.x * q1.z + q2.y * q1.w,\n    -q2.y * q1.x + q2.x * q1.y + q2.w * q1.z + q2.z * q1.w,\n    -q2.x * q1.x - q2.y * q1.y - q2.z * q1.z + q2.w * q1.w\n  );\n}\n\nfloat qdot(Quaternion q1, Quaternion q2) {\n  return q1.x * q2.x + q1.y * q2.y + q1.z * q2.z + q1.w * q2.w;\n}\n\nfloat squareNorm(Quaternion q) {\n  return q.x * q.x + q.y * q.y + q.z * q.z + q.w + q.w;\n}\n\nfloat norm(Quaternion q) {\n  return sqrt(squareNorm(q));\n}\n\nQuaternion qinverse(Quaternion q) {\n  Quaternion c = conjugate(q);\n  float s = norm(q);\n\n  return mul(c, 1.0 / s);\n}\n\nvec3 rotate(vec3 v, Quaternion q) {\n  // norm of q must be 1.\n  Quaternion vq = Quaternion(v.x, v.y, v.z, 0.0);\n  Quaternion cq = conjugate(q);\n  Quaternion mq = mul(mul(cq, vq), q);\n\n  return vec3(mq.x, mq.y, mq.z);\n}\n \nQuaternion slerp(Quaternion q1, Quaternion q2, float t) {\n  float cosine = qdot(q1, q2);\n  if (cosine < 0.0) {\n    cosine = qdot(q1, mul(q2, -1.0));\n  }\n  float r = acos(qdot(q1, q2));\n  float is = 1.0 / sin(r);\n\n  return add(\n    mul(q1, sin((1.0 - t) * r) * is),\n    mul(q2, sin(t * r) * is)\n  );\n}\n","\n\nvoid main() {\n\tvec4 positionInfo = texture2D(u_texturePosition, a_ref);\n\tvec4 prevPositionInfo = texture2D(u_texturePrevPosition, a_ref);\n\tvec3 pos = position;\n\n\tv_normal = normalize(normal);\n\n\t// ----------------------------------------------\n\t// 1. generate plane from 0 scale\n\n\tpos *= u_boxScale;\n\tpos *= clamp(1.0 - positionInfo.w, 0.0, 1.0);\n\n\t// ----------------------------------------------\n\t// 2. rotate using quaternion\n\n\t// calc rotate axis\n\tvec3 dir = normalize(positionInfo.xyz - prevPositionInfo.xyz);\n\tvec3 rotateAxis = normalize(cross(BASIC_VECTOR, dir));\n\n\tif (0.0 < length(rotateAxis)) {\n\t\t// calc angle\n\t\tfloat c = dot(BASIC_VECTOR, dir);\n\t\tfloat angle = acos(c);\n\n\t\t// rotate using Quaternion\n\t\tQuaternion q = axisAngle(rotateAxis, angle);\n\t\tpos = rotate(pos, q);\n\t\tv_normal = normalize(rotate(normal, q));\n\t}\n\n\t// ----------------------------------------------\n\t// 3. convert position to grobal from local\n\n\tvec4 globalPosition = instanceMatrix * vec4(pos, 1.0);\n\tvec3 gPos = positionInfo.xyz + globalPosition.xyz;\n\n\tvec4 mPos = modelMatrix * vec4(gPos, 1.0);\n\tv_pos = mPos.xyz;\n\n\tgl_Position = projectionMatrix * viewMatrix * mPos;\n}\n"),j="\nuniform float u_time;\nuniform sampler2D u_defaultTexture;\n\nconst float divergence = 0.03;\nconst float dieSpeed = 0.99;\n\n".concat(b,"\n\nvoid main()\t{\n\tvec2 uv = gl_FragCoord.xy / resolution.xy;\n\tvec4 tmpPos = texture2D(texturePosition, uv);\n\tvec3 pos = tmpPos.xyz;\n\tfloat life = tmpPos.w;\n\n\tif (life < 0.01) {\n\t\tvec4 defPos = texture2D(u_defaultTexture, uv);\n\t\tpos = defPos.xyz;\n\t\tlife = defPos.w + 1.0;\n\t}\n\n\tvec3 seed = sin(pos * 0.1 + u_time * 0.01) + u_time * 0.01;\n\tpos += curlNoise33(seed) * divergence;\n\n\tgl_FragColor = vec4(pos, life * dieSpeed);\n}\n"),w=t(0),z=t(1),O=t(35),P=function(n,e){return Math.random()*(e-n)+n},C=function(){function n(e,t,o){var r=this;Object(w.a)(this,n),this._width=t,this._height=o,this._gpuCompute=void 0,this._variables=[],this._positionMaterial=new x.ShaderMaterial,this._setTexturePosition=function(){for(var n=r._gpuCompute.createTexture(),e=n.image.data,t=0;t<e.length;t+=4){var o=P(-3,3),i=P(-3,3),a=P(-3,3),s=P(.3,1);e[t+0]=o,e[t+1]=i,e[t+2]=a,e[t+3]=s}var u=r._gpuCompute.addVariable("texturePosition",j,n);u.wrapS=x.RepeatWrapping,u.wrapT=x.RepeatWrapping,r._positionMaterial=u.material,r._positionMaterial.uniforms.u_defaultTexture={value:n.clone()},r._positionMaterial.uniforms.u_time={value:0},r._variables.push(u)},this._setVariableDependencies=function(){r._variables.forEach((function(n){r._gpuCompute.setVariableDependencies(n,r._variables)}))},this.compute=function(){r._gpuCompute.compute(),r._positionMaterial.uniforms.u_time.value+=.005},this._gpuCompute=new O.a(this._width,this._height,e),this._setTexturePosition(),this._setVariableDependencies(),this._gpuCompute.init()}return Object(z.a)(n,[{key:"texturePosition",get:function(){var n=this._variables.find((function(n){return"texturePosition"===n.name}));return this._gpuCompute.getCurrentRenderTarget(n).texture}},{key:"texturePrevPosition",get:function(){var n=this._variables.find((function(n){return"texturePosition"===n.name}));return this._gpuCompute.getAlternateRenderTarget(n).texture}}]),n}(),Q=t(14),M=t(36),S={enabled:!0,exposure:.3,decay:.95,density:.4,weight:.2,samples:100},D={x:.3,y:.05,z:1},A={color:"#fff"},R=function(){function n(){var e=this;Object(w.a)(this,n),this._gui=void 0,this._folder=function(n){var t=e._gui.folders.find((function(e){return e._title===n}));return t||(t=e._gui.addFolder(n)),t},this._uncontainedName=function(n,e){return!n.controllers.find((function(n){return n._name===e}))},this.setBox=function(){var n=e._folder("Instanced Box"),t=function(t,o){e._uncontainedName(n,t)&&n.add.apply(n,[D,t].concat(Object(Q.a)(o)))};t("x",[.05,1,.01]),t("y",[.05,1,.01]),t("z",[.05,1,.01])},this.setLight=function(){var n=e._folder("Light");e._uncontainedName(n,"color")&&n.addColor(A,"color")},this.setVolumetricLight=function(){var n=e._folder("Post-processing"),t=function(t,o){o?e._uncontainedName(n,t)&&n.add.apply(n,[S,t].concat(Object(Q.a)(o))):e._uncontainedName(n,t)&&n.add(S,t)};t("enabled"),t("exposure",[0,1,.01]),t("decay",[0,1,.01]),t("density",[0,1,.01]),t("weight",[0,1,.01]),t("samples",[10,100,10])},this._gui=new M.a}return Object(z.a)(n,null,[{key:"instance",get:function(){return this._instance||(this._instance=new n),this._instance}}]),n}();R._instance=void 0;var L=function(){var n=Object(o.useRef)(null),e=Object(g.f)().gl,t=128,r=128,i=16384,a=Object(o.useMemo)((function(){return new C(e,t,r)}),[e,r,t]),s=Object(o.useMemo)((function(){for(var n=[],e=0;e<t;e++)for(var o=0;o<r;o++)n.push(e/t,o/r);return Float32Array.from(n)}),[r,t]);Object(o.useEffect)((function(){for(var e=new x.Matrix4,t=0;t<i;t++)e.setPosition(0,0,0),n.current.setMatrixAt(t,e)}),[i]);var u={uniforms:{u_light:{value:[0,0,0]},u_lightColor:{value:new x.Color(A.color)},u_boxScale:{value:[D.x,D.y,D.z]},u_texturePosition:{value:null},u_texturePrevPosition:{value:null}},vertexShader:y,fragmentShader:"\nuniform vec3 u_light;\nuniform vec3 u_lightColor;\nvarying vec3 v_pos;\nvarying vec3 v_normal;\n\nvoid main() {\n\tvec3 color = u_lightColor * 0.8;\n\n\tvec3 fromLight = v_pos - u_light;\n\tfloat d = 1.0 - (dot(v_normal, normalize(fromLight)) + 1.0) * 0.5; // 0 ~ 1\n\tcolor *= smoothstep(0.5, 0.8, d);\n\n\tfloat decay = 1.0 - smoothstep(5.0, 10.0, length(fromLight));\n\tcolor *= decay;\n\n\tgl_FragColor = vec4(color, 1.0);\n}\n"};return R.instance.setBox(),Object(g.e)((function(){a.compute(),u.uniforms.u_texturePosition.value=a.texturePosition,u.uniforms.u_texturePrevPosition.value=a.texturePrevPosition,u.uniforms.u_boxScale.value=[D.x,D.y,D.z],u.uniforms.u_lightColor.value=new x.Color(A.color)})),Object(c.jsxs)("instancedMesh",{ref:n,args:[void 0,void 0,i],castShadow:!0,receiveShadow:!0,children:[Object(c.jsx)("boxGeometry",{args:[1,1,1],children:Object(c.jsx)("instancedBufferAttribute",{attachObject:["attributes","a_ref"],args:[s,2]})}),Object(c.jsx)("shaderMaterial",{args:[u]})]})},T=t(43),k=t(40),F=t(20),I=t(41);Object(g.d)({EffectComposer:T.a,RenderPass:k.a,ShaderPass:F.a});var B=function(n){var e=n.children,t=n.sRGBCorrection,r=Object(o.useRef)(null),i=Object(g.f)(),a=i.gl,s=i.scene,u=i.camera,l=i.size;return Object(o.useEffect)((function(){r.current.setSize(l.width,l.height)}),[l]),Object(g.e)((function(){r.current.render()}),1),Object(c.jsxs)("effectComposer",{ref:r,args:[a],children:[Object(c.jsx)("renderPass",{attachArray:"passes",args:[s,u]}),e,t&&Object(c.jsx)("shaderPass",{attachArray:"passes",args:[I.a]})]})};Object(g.d)({ShaderPass:F.a});var E=function(){R.instance.setVolumetricLight();var n=Object(o.useRef)(null),e=Object(o.useMemo)((function(){return{uniforms:{tDiffuse:{value:null},u_lightPosition:{value:[.5,.5]},u_exposure:{value:S.exposure},u_decay:{value:S.decay},u_density:{value:S.density},u_weight:{value:S.weight},u_samples:{value:S.samples}},vertexShader:V,fragmentShader:N}}),[]);return Object(g.e)((function(){n.current.enabled=S.enabled,n.current.uniforms.u_exposure.value=S.exposure,n.current.uniforms.u_decay.value=S.decay,n.current.uniforms.u_density.value=S.density,n.current.uniforms.u_weight.value=S.weight,n.current.uniforms.u_samples.value=S.samples})),Object(c.jsx)("shaderPass",{ref:n,attachArray:"passes",args:[e]})},V="\nvarying vec2 v_uv;\n\nvoid main() {\n  v_uv = uv;\n\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n",N="\nuniform sampler2D tDiffuse;\nuniform vec2 u_lightPosition;\nuniform float u_exposure;\nuniform float u_decay;\nuniform float u_density;\nuniform float u_weight;\nuniform int u_samples;\nvarying vec2 v_uv;\n\nconst int MAX_SAMPLES = 100;\n\nvoid main() {\n  vec2 texCoord = v_uv;\n  vec2 deltaTextCoord = texCoord - u_lightPosition;\n  vec4 color = texture2D(tDiffuse, texCoord);\n  deltaTextCoord *= 1.0 / float(u_samples) * u_density;\n  float illuminationDecay = 1.0;\n\n  for(int i = 0; i < MAX_SAMPLES; i++) {\n    if(i == u_samples) break;\n    texCoord -= deltaTextCoord;\n    vec4 tex = texture2D(tDiffuse, texCoord);\n    tex *= illuminationDecay * u_weight;\n    color += tex;\n    illuminationDecay *= u_decay;\n  }\n\n  gl_FragColor = color * u_exposure;\n}\n",G=function(){return Object(c.jsxs)(g.a,{camera:{position:[0,0,15],fov:50,aspect:window.innerWidth/window.innerHeight,near:.01,far:2e3},dpr:window.devicePixelRatio,shadows:!0,children:[Object(c.jsx)("color",{attach:"background",args:["#000"]}),Object(c.jsx)(W,{}),Object(c.jsx)(L,{}),Object(c.jsx)(B,{children:Object(c.jsx)(E,{})}),Object(c.jsx)(m.a,{}),Object(c.jsx)(p.a,{})]})},W=function(){var n=Object(o.useRef)(null);return R.instance.setLight(),Object(g.e)((function(){n.current.material.color=new x.Color(A.color)})),Object(c.jsx)(_.a,{ref:n,args:[2,10],children:Object(c.jsx)("meshBasicMaterial",{color:A.color})})},J=function(){return Object(c.jsxs)("div",{style:{width:"100vw",height:"100vh",overflow:"hidden"},children:[Object(c.jsx)(G,{}),Object(c.jsx)(l,{imagePath:"/assets/icons/github.svg",linkPath:"https://github.com/nemutas/r3f-gyogun"})]})},X=function(n){n&&n instanceof Function&&t.e(3).then(t.bind(null,58)).then((function(e){var t=e.getCLS,o=e.getFID,r=e.getFCP,i=e.getLCP,a=e.getTTFB;t(n),o(n),r(n),i(n),a(n)}))};a.a.render(Object(c.jsx)(r.a.StrictMode,{children:Object(c.jsx)(J,{})}),document.getElementById("root")),X()}},[[52,1,2]]]);
//# sourceMappingURL=main.50e7d6d9.chunk.js.map